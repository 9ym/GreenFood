<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kh.greenfood.product">

	<!-- 상품 추가 -->
	<insert id="insertProduct">
		insert into tbl_product (product_code, product_category, product_title, 
			product_price, product_sub_title, product_content, 
			product_weight, product_sales_unit, product_origin
			<if test="shelfLife != 0">
				, product_shelf_life
			</if>
			<if test="saleRate != 0">
				, product_sale_rate
			</if>
			<if test="salesDeadlines != 0">
				, product_sales_deadlines
			</if>
			)
		values (seq_product_code.nextval, #{productVo.product_category}, #{productVo.product_title}, 
			#{productVo.product_price}, #{productVo.product_sub_title}, #{productVo.product_content}, 
			#{productVo.product_weight}, #{productVo.product_sales_unit}, #{productVo.product_origin}
			<if test="shelfLife != 0">
				, #{shelfLife}
			</if>
			<if test="saleRate != 0">
				, #{saleRate}
			</if>
			<if test="salesDeadlines != 0">
				, sysdate + #{salesDeadlines}
			</if>
			)
	</insert>
	
	<!-- 제일 최근 추가된 상품 -->
	<select id="getProductLatest" resultType="ProductVo">
		select * from
		    (select rownum, a.*from 
		        (select * from tbl_product
		        order by product_registration_date desc)a
		    )b
		where rownum between 1 and 1
	</select>
	
	<!-- 상품 이미지 추가 -->
	<insert id="insertProductImage">
		insert into tbl_product_image (image_code, product_code, image_info_file_name, image_content_file_name)
		values (seq_image_code.nextval, #{product_code}, #{image_info_file_name}, #{image_content_file_name})	
	</insert>

	<!-- 상품 하나 -->
	<select id="getProduct" resultType="ProductVo">
		select * from tbl_product
		where product_code = #{product_code}
	</select>
	
	<!-- 상품 하나에 대한 이미지 -->
	<select id="getProductImage" resultType="ProductImageDto">
		select * from tbl_product_image
		where product_code = #{product_code}
	</select>

	<!-- 모든 상품 목록 -->
	<select id="getProductList" resultType="ProductVo">
		select * from tbl_product
		<include refid="search"></include>
		order by product_code desc
	</select>
	
	<!-- 모든 상품-사진 목록 -->
	<select id="getProductImageList" resultType="ProductImageDto">
		select * from tbl_product_image
		order by image_code desc
	</select>
	
	<!-- 제일 많이 팔린 상품 ?개 목록 -->
	<select id="getPopularProduct" resultType="ProductVo">
		<![CDATA[
			select * from
			    (select rownum, a.* from 
			        (select * from tbl_product
			        where ( sysdate < product_sales_deadlines 
						or product_sales_deadlines is null )
			        order by product_order_count desc)a
			    )b
			where rownum between 1 and #{best_count}
			order by rownum asc
		]]>
	</select>
	
	<!-- 카테고리에 따른 상품 목록 -->
	<select id="getProductCategory" resultType="ProductVo">
		<![CDATA[
			select * from tbl_product
			where ( sysdate < product_sales_deadlines 
				or product_sales_deadlines is null )
			and product_category = #{product_category}
			order by product_code desc
		]]>
	</select>
	
	<!-- 카테고리 자체 목록 -->
	<select id="getCategory" resultType="ProductCategoryDto">
		select * from tbl_product_category
	</select>
	
	<!-- 신상품 목록 -->
	<select id="getLatestProduct" resultType="ProductVo">
		<![CDATA[
			select * from tbl_product
			where ( sysdate < product_sales_deadlines 
				or product_sales_deadlines is null )
			and sysdate - #{conditionDate} < product_registration_date
			order by product_registration_date desc
		]]>
	</select>
	
	<!-- 추천상품 목록 -->
	<select id="getBestProduct" resultType="ProductVo">
		<![CDATA[
			select * from tbl_product
			where ( sysdate < product_sales_deadlines 
				or product_sales_deadlines is null )
			and product_star >= #{conditionOrderCount}
			order by product_star desc
		]]>
	</select>
	
	<!-- 세일상품 목록 -->
	<select id="getSaleProduct" resultType="ProductVo">
		<![CDATA[
			select * from tbl_product
			where ( product_sales_deadlines >= sysdate
					and product_sales_deadlines is not null )
			and sysdate + 14 >= product_sales_deadlines
			order by product_sales_deadlines asc
		]]>
	</select>
	
	<!-- 할인율 수정 -->
	<select id="updateSaleRate" resultType="ProductVo">
		update tbl_product set
			product_sale_rate = #{saleRate}
		where product_code = #{product_code}
	</select>
	
	<!-- 관련 상품(=카테고리) 랜덤으로 6개 -->
	<select id="getRelatedProduct" resultType="ProductVo">
		<![CDATA[
			select * from  
			    (select * from tbl_product
			    where ( sysdate <= product_sales_deadlines
					or product_sales_deadlines is null )
			    and ( product_category = #{product_category}
			   		and product_code != #{product_code} )
			    order by dbms_random.value)
			where rownum <= 6
		]]>
	</select>
	
	<!-- 후기, 별점 
	tbl_star_point 후기 하나 쓸 때마다 별 5개(max, 1~5 정수만 가능) 주면서 테이블 생기고
	상품 안에 product_heart(star) 는 후기 하나 쓸 때마다
	후기-별점 받아서 서비스 안에서 
	매퍼1 : 별 테이블 생성, 
	(매퍼1 별 생성, 2 별 평균 - 반올림 정수 만들기 !!!, 3 별 값 넣기?? -> 매퍼 3개 ??? ) 
	매퍼2 : 생긴 별 테이블 상품 코드 조건 걸어서 star_point 평균내서 -> 0.0 ~ 5.0 사이, 소수 1자리 가능
	그걸 상품 product_heart(star) 에 업데이트 해줌
	
	나중에 상품 불러올 때, product_heart(star) 나오게 하고 
	여기에 별 5개 칸 채우기 
	-->
	
	<!-- 후기 별점 생성 -->
	<insert id="createStar">
		insert into tbl_star_point (star_point_no, user_id, order_code, product_code, star_point)
		values (seq_star_no.nextval, #{user_id}, #{order_code}, #{product_code}, #{star_point})
	</insert>
	
	<!-- 후기 별점 평균 -->
	<select id="averageStar" resultType="int">
		select round(avg(star_point)) star_avg
		from tbl_star_point
		where product_code = #{product_code}
		group by product_code
	</select>
	
	<!-- 후기 별점 평균값 -> 상품에 업데이트 -->
	<update id="updateStar">
		update tbl_product set
			product_star = #{star_avg}
		where product_code = #{product_code}
	</update>
	
	<!-- 관리자 : 상품 검색, 순서  rnum 추가 -->
	<select id="getSearchProduct" parameterType="SearchDto" resultType="ProductVo">
		select p.* from 
			(select rownum rnum, a.* from 
				(select * from tbl_product
				<include refid="searchSql"/>
				)a
			)p
		where rnum between #{startRow} and #{endRow}
	</select>
	
	<!-- 관리자 : 상품 검색, 전체 갯수 -->
	<select id="getSearchProductCount" parameterType="SearchDto" resultType="int">
		select count(*) from tbl_product
		<include refid="searchSql"/>
	</select>
	
	<sql id="searchSql">
		<choose>
			<when test="searchWhere.equals('all')">
				where product_category is not null
			</when>
			<otherwise>
				where product_category = #{searchWhere}
			</otherwise>
		</choose>
		<if test="searchWhat != null">
			and product_title like '%' || #{searchWhat} || '%'
		</if>
		<choose>
			<when test="searchAnd.equals('date')">
				order by product_registration_date
			</when>
			<when test="searchAnd.equals('new')">
				<![CDATA[
				and sysdate - 14 <= product_registration_date
				order by product_registration_date
				]]>
			</when>
			<when test="searchAnd.equals('sale')">
				and product_sale_rate != 0
				order by product_sale_rate
			</when>
			<when test="searchAnd.equals('star')">
				order by product_star
			</when>
			<when test="searchAnd.equals('orderCount')">
				order by product_order_count
			</when>
			<when test="searchAnd.equals('end')">
				<![CDATA[
				and sysdate > product_sales_deadlines
				order by product_sales_deadlines
				]]>
			</when>
		</choose>
		<choose>
			<when test="searchBy.equals('desc')">
				desc
			</when>
			<otherwise>
				asc
			</otherwise>
		</choose>
	</sql>
	
	<!-- 해당 상품 판매 종료 -->
	<delete id="endProduct" parameterType="java.util.List">
		update tbl_product
			set product_sales_deadlines = sysdate -1
		where product_code in ( <foreach collection="list" item="no" separator=",">#{no}</foreach> )
	</delete>
	
	<!-- 판매 종료 여부 확인 (0:판매 종료 / 1:판매중)-->
	<select id="knowEndProduct" resultType="int">
		<![CDATA[
			select count(*) from tbl_product
			where (product_sales_deadlines >= sysdate
					or product_sales_deadlines is null)
			and product_code = #{product_code}
		]]>
	</select>
	
	<!-- 제품에 따른 후기 리스트 받아오기 -->
	<select id="getReviewdListProduct" resultType="ReviewVo">
	select * from (select rownum rnum, a.* 
    	from (select t.* from 
        	(select r.* from tbl_review r
            	where product_code = #{product_code} 
            		order by review_date desc) t) a)
            		where rnum between #{startRow} and #{endRow}
	</select>
	
	<!-- 검색 기능 -->
	<sql id="search">
		<choose>
			<when test="keyword != null">
				where product_title like '%' || #{keyword} || '%'
			</when>
		</choose>
	</sql>

	<!-- 해당 상품 다시 판매 -->
	<delete id="startProduct">
		update tbl_product
			set product_sales_deadlines = null
		where product_code = #{product_code}
	</delete>
	
	<!-- 상품 수정 -->
	<update id="updateProduct">
		update tbl_product set
			product_category = #{productVo.product_category},
			product_title = #{productVo.product_title},
			product_price = #{productVo.product_price},
			product_sub_title = #{productVo.product_sub_title},
			product_content = #{productVo.product_content},
			product_weight = #{productVo.product_weight},
			product_sales_unit = #{productVo.product_sales_unit},
			product_origin = #{productVo.product_origin}
			<if test="mapShelfLife.shelfLifeStr.equals('updateYes')">
				, product_shelf_life = #{mapShelfLife.shelfLife}
			</if>
			<if test="mapSaleRate.saleRateStr.equals('updateYes')">
				, product_sale_rate = #{mapSaleRate.saleRate}
			</if>
			<if test="mapSalesDeadlines.salesDeadlinesStr.equals('updateYes')">
				, product_sales_deadlines = sysdate + #{mapSalesDeadlines.salesDeadlines}
			</if>
		where product_code = #{productVo.product_code}
	</update>
	
	<!-- 상품 이미지 수정 -->
	<update id="updateProductImage">
		update tbl_product_image set
		<choose>
			<when test="isImage.equals('isInfo')">
				image_info_file_name = #{productImageDto.image_info_file_name}
			</when>
			<when test="isImage.equals('isContent')">
				image_content_file_name = #{productImageDto.image_content_file_name}
			</when>
			<when test="isImage.equals('isAll')">
				image_info_file_name = #{productImageDto.image_info_file_name}, 
				image_content_file_name = #{productImageDto.image_content_file_name}
			</when>
		</choose>
		where product_code = #{product_code}
	</update>

	<!-- 상품명으로 전체 검색 -->
	<select id="getSearchTitle" resultType="ProductVo">
		select * from tbl_product
		where product_title like '%' || #{product_title} || '%'
	</select>

</mapper>